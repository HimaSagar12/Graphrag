{
    "model_answer": "To integrate Horizon for querying the codebase, you need to ensure that the `HorizonLLMClient` is properly utilized for generating responses to user queries. The existing code already includes a `HorizonLLMClient` instance for generating function comments. You can extend this to handle codebase queries as well.\n\nHere's how you can modify the `main()` function to use Horizon for querying:\n\n1. **Initialize the Horizon Client**: Ensure the `HorizonLLMClient` is initialized before handling queries.\n2. **Use Horizon for Query Responses**: Modify the query handling section to use Horizon for generating responses.\n\nHere's the updated `main()` function with these changes:\n\n```python\ndef main():\n    st.title(\"Code Visualizer and Query Engine\")\n\n    if \"code_contents\" not in st.session_state:\n        st.session_state.code_contents = {}\n\n    uploaded_files = st.file_uploader(\"Upload Python files\", accept_multiple_files=True, type=\"py\")\n\n    if uploaded_files:\n        if not st.session_state.code_contents:\n            for uploaded_file in uploaded_files:\n                st.session_state.code_contents[uploaded_file.name] = uploaded_file.getvalue().decode(\"utf-8\")\n\n        code_graph = load_graph_data(st.session_state.code_contents)\n        query_engine = QueryEngine(code_graph)\n        dot_generator = DotGenerator()\n\n        st.header(\"Code Graph Visualization\")\n        dot_string = dot_generator.generate_dot(code_graph)\n        st.graphviz_chart(dot_string)\n        \n        # Visualization and download code omitted for brevity...\n\n        st.header(\"Query Your Codebase\")\n        query = st.text_input(\"Enter your query:\").strip().lower()\n\n        if st.button(\"Submit Query\"):\n            if query:\n                client = HorizonLLMClient()\n                response = \"I couldn't understand your query. Try something like: 'functions in <file_name>', 'callers of <function_name>', 'details of <node_name>'.\"\n\n                # Use Horizon to generate a response for the query\n                try:\n                    horizon_response = client.get_chat_response(\n                        user_msg=f\"Analyze the following codebase and answer the query: '{query}'\"\n                    )\n                    response = horizon_response[\"model_answer\"]\n                except Exception as e:\n                    response = f\"An error occurred while querying: {e}\"\n\n                st.text_area(\"Query Result\", response, height=200)\n            else:\n                st.warning(\"Please enter a query.\")\n\n        # Generate Function Comments and other features omitted for brevity...\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Key Points:\n- **Horizon Client**: The `HorizonLLMClient` is used to generate responses for user queries. This assumes that the client is capable of understanding and processing the queries related to the codebase.\n- **Error Handling**: Ensure that any exceptions during the Horizon API call are caught and handled gracefully.\n- **Query Format**: The queries should be formatted in a way that Horizon can understand and provide meaningful responses.\n\nThis setup assumes that the Horizon client is configured to handle such queries effectively. If Horizon requires specific input formats or additional context, you may need to adjust the query string accordingly."
}